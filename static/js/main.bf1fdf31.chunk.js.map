{"version":3,"sources":["components/nav/nav.jsx","components/home/homeRoute.jsx","redux/actionTypes.js","redux/posts/postsActions.js","components/posts/postListItem.jsx","components/shared/loading.jsx","components/posts/postsRoute.jsx","redux/user/userActions.js","redux/post/postActions.js","components/user/userSummary.jsx","components/posts/postDetail.jsx","components/posts/postRoute.jsx","app/router.jsx","app/app.jsx","serviceWorker.js","redux/posts/postsReducer.js","redux/post/postReducer.js","redux/user/userReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Nav","react_default","a","createElement","className","role","aria-label","href","target","rel","src","width","height","alt","id","react_router_dom","to","HomeRoute","POST_LOADING","POST_FETCH_SUCCESS","POST_FETCH_FAILURE","POSTS_LOADING","POSTS_FETCH_SUCCESS","POSTS_FETCH_FAILURE","USER_CLEAR","USER_LOADING","USER_FETCH_SUCCESS","USER_FETCH_FAILURE","postsLoading","bool","type","payload","fetchPosts","dispatch","axios","get","then","response","items","data","catch","err","message","PostListItem","concat","this","props","title","React","Component","Loading","max","PostsRoute","posts","loadPosts","isLoading","loading","map","post","postListItem","Object","assign","key","connect","state","userLoading","fetchUser","setTimeout","postLoading","fetchPost","userId","UserSummary","name","PostDetail","userSummary","user","body","PostRoute","match","params","loadPost","loadError","postDetail","Router","react_router","exact","path","component","App","nav","router","Boolean","window","location","hostname","initialState","combineReducers","arguments","length","undefined","action","objectSpread","createStore","rootReducer","applyMiddleware","thunk","rootElement","document","getElementById","ReactDOM","render","es","store","app_app","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf1fdf31.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n      <div className=\"navbar-brand\">\r\n        <a\r\n          className=\"navbar-item\"\r\n          href=\"https://bulma.io\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img\r\n            src=\"https://bulma.io/images/bulma-logo.png\"\r\n            width=\"112\"\r\n            height=\"28\"\r\n            alt=\"logo\"\r\n          />\r\n        </a>\r\n      </div>\r\n\r\n      <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n        <div className=\"navbar-start\">\r\n          <Link className=\"navbar-item\" to=\"/\">\r\n            Home\r\n          </Link>\r\n\r\n          <Link className=\"navbar-item\" to=\"/posts\">\r\n            Posts\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"navbar-end\">\r\n          <div className=\"navbar-item\">\r\n            <div className=\"buttons\">\r\n              <button className=\"button is-primary\">\r\n                <strong>Sign up</strong>\r\n              </button>\r\n              <button className=\"button is-light\">Log in</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\nfunction HomeRoute() {\r\n  return <h1 className=\"title\">Home</h1>;\r\n}\r\n\r\nexport default HomeRoute;\r\n","export const POST_LOADING = 'POST_LOADING';\r\nexport const POST_FETCH_SUCCESS = 'POST_FETCH_SUCCESS';\r\nexport const POST_FETCH_FAILURE = 'POST_FETCH_FAILURE';\r\nexport const POSTS_LOADING = 'POSTS_LOADING';\r\nexport const POSTS_FETCH_SUCCESS = 'POSTS_FETCH_SUCCESS';\r\nexport const POSTS_FETCH_FAILURE = 'POSTS_FETCH_FAILURE';\r\nexport const USER_CLEAR = 'USER_CLEAR';\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const USER_FETCH_SUCCESS = 'USER_FETCH_SUCCESS';\r\nexport const USER_FETCH_FAILURE = 'USER_FETCH_FAILURE';\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  POSTS_LOADING,\r\n  POSTS_FETCH_SUCCESS,\r\n  POSTS_FETCH_FAILURE\r\n} from '../actionTypes';\r\n\r\nexport function postsFetchFailure(message) {\r\n  return {\r\n    type: POSTS_FETCH_FAILURE,\r\n    payload: message\r\n  };\r\n}\r\n\r\nexport function postsLoading(bool) {\r\n  return {\r\n    type: POSTS_LOADING,\r\n    payload: bool\r\n  };\r\n}\r\n\r\nexport function postsFetchSuccess(items) {\r\n  return {\r\n    type: POSTS_FETCH_SUCCESS,\r\n    payload: items\r\n  };\r\n}\r\n\r\nexport function fetchPosts() {\r\n  return dispatch => {\r\n    dispatch(postsLoading(true));\r\n\r\n    axios\r\n      .get('https://jsonplaceholder.typicode.com/posts', {})\r\n      .then(response => {\r\n        dispatch(postsLoading(false));\r\n        dispatch(postsFetchSuccess(response.data));\r\n      })\r\n      .catch(err => {\r\n        dispatch(postsLoading(false));\r\n        dispatch(postsFetchFailure(err.message));\r\n      });\r\n  };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass PostListItem extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Link to={`/post/${this.props.id}`}>{this.props.title}</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPostListItem.propTypes = {\r\n  userId: PropTypes.number,\r\n  id: PropTypes.number,\r\n  title: PropTypes.string,\r\n  body: PropTypes.string\r\n};\r\n\r\nexport default PostListItem;\r\n","import React from 'react';\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div className=\"columns is-mobile\">\r\n      <div className=\"column is-half is-offset-one-quarter\">\r\n        <progress className=\"progress is-primary\" max=\"100\"></progress>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../../redux/posts/postsActions';\r\nimport Post from './postListItem';\r\nimport Loading from '../shared/loading';\r\n\r\nclass PostsRoute extends React.Component {\r\n  componentDidMount() {\r\n    if (this.props.posts === null) {\r\n      this.props.loadPosts();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"title\">Posts</h1>\r\n        {this.props.isLoading && <Loading></Loading>}\r\n        {this.props.posts &&\r\n          this.props.posts.map(post => <Post key={post.id} {...post} />)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoading: state.posts.isLoading,\r\n    posts: state.posts.posts\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    loadPosts: () => {\r\n      dispatch(fetchPosts());\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostsRoute);\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  USER_CLEAR,\r\n  USER_LOADING,\r\n  USER_FETCH_SUCCESS,\r\n  USER_FETCH_FAILURE\r\n} from '../actionTypes';\r\n\r\nexport function userClear() {\r\n  return {\r\n    type: USER_CLEAR\r\n  };\r\n}\r\n\r\nexport function userFetchFailure(message) {\r\n  return {\r\n    type: USER_FETCH_FAILURE,\r\n    payload: message\r\n  };\r\n}\r\n\r\nexport function userLoading(bool) {\r\n  return {\r\n    type: USER_LOADING,\r\n    payload: bool\r\n  };\r\n}\r\n\r\nexport function userFetchSuccess(items) {\r\n  return {\r\n    type: USER_FETCH_SUCCESS,\r\n    payload: items\r\n  };\r\n}\r\n\r\nexport function fetchUser(id) {\r\n  return dispatch => {\r\n    dispatch(userLoading(true));\r\n\r\n    //simulate a response delay\r\n    setTimeout(() => {\r\n      axios\r\n        .get('https://jsonplaceholder.typicode.com/users/' + id, {})\r\n        .then(response => {\r\n          dispatch(userLoading(false));\r\n          dispatch(userFetchSuccess(response.data));\r\n        })\r\n        .catch(err => {\r\n          dispatch(userLoading(false));\r\n          dispatch(userFetchFailure(err.message));\r\n        });\r\n    }, 1000);\r\n  };\r\n}\r\n","import axios from 'axios';\r\nimport { fetchUser, userClear } from '../user/userActions';\r\n\r\nimport {\r\n  POST_LOADING,\r\n  POST_FETCH_SUCCESS,\r\n  POST_FETCH_FAILURE\r\n} from '../actionTypes';\r\n\r\nexport function postFetchFailure(message) {\r\n  return {\r\n    type: POST_FETCH_FAILURE,\r\n    payload: message\r\n  };\r\n}\r\n\r\nexport function postLoading(bool) {\r\n  return {\r\n    type: POST_LOADING,\r\n    payload: bool\r\n  };\r\n}\r\n\r\nexport function postFetchSuccess(items) {\r\n  return {\r\n    type: POST_FETCH_SUCCESS,\r\n    payload: items\r\n  };\r\n}\r\n\r\nexport function fetchPost(id) {\r\n  return dispatch => {\r\n    dispatch(postLoading(true));\r\n    dispatch(userClear());\r\n\r\n    //simulate a response delay\r\n    setTimeout(() => {\r\n      axios\r\n        .get('https://jsonplaceholder.typicode.com/posts/' + id, {})\r\n        .then(response => {\r\n          dispatch(fetchUser(response.data.userId));\r\n          dispatch(postLoading(false));\r\n          dispatch(postFetchSuccess(response.data));\r\n        })\r\n        .catch(err => {\r\n          dispatch(postLoading(false));\r\n          dispatch(postFetchFailure(err.message));\r\n        });\r\n    }, 1000);\r\n  };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass UserSummary extends React.Component {\r\n  render() {\r\n    return <h2 className=\"subtitle\">By: {this.props.name}</h2>;\r\n  }\r\n}\r\n\r\nUserSummary.propTypes = {\r\n  name: PropTypes.string\r\n};\r\n\r\nexport default UserSummary;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport UserSummary from '../user/userSummary';\r\n\r\nclass PostDetail extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"title\">{this.props.title}</h1>\r\n        <UserSummary className=\"sub-title\" {...this.props.user}></UserSummary>\r\n        <p>{this.props.body}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPostDetail.propTypes = {\r\n  user: PropTypes.object,\r\n  title: PropTypes.string,\r\n  body: PropTypes.string\r\n};\r\n\r\nexport default PostDetail;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPost } from '../../redux/post/postActions';\r\nimport PostDetail from './postDetail';\r\nimport Loading from '../shared/loading';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass PostRoute extends React.Component {\r\n  componentDidMount() {\r\n    const id = this.props.match.params.id;\r\n    this.props.loadPost(id);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.isLoading && <Loading></Loading>}\r\n        {this.props.loadError && (\r\n          <div>\r\n            <h4 className=\"has-text-danger\">Unable to find requested item</h4>\r\n            <span>\r\n              Go to <Link to=\"/posts\">Posts</Link>\r\n            </span>\r\n          </div>\r\n        )}\r\n        {this.props.post && !this.props.isLoading && (\r\n          <PostDetail {...this.props.post} user={this.props.user} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoading: state.post.isLoading,\r\n    loadError: state.post.loadError,\r\n    post: state.post.post,\r\n    user: state.user.user\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    loadPost: id => {\r\n      dispatch(fetchPost(id));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostRoute);\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport HomeRoute from '../components/home/homeRoute.jsx';\r\nimport PostsRoute from '../components/posts/postsRoute.jsx';\r\nimport PostRoute from '../components/posts/postRoute.jsx';\r\n\r\n//https://github.com/airbnb/javascript/tree/master/react#class-vs-reactcreateclass-vs-stateless\r\nfunction Router() {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={HomeRoute} />\r\n      <Route path=\"/posts\" component={PostsRoute} />\r\n      <Route path=\"/post/:id\" component={PostRoute} />\r\n    </Switch>\r\n  );\r\n}\r\nexport default Router;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './app.scss';\r\nimport Nav from '../components/nav/nav.jsx';\r\nimport Router from './router';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Nav></Nav>\r\n      <section className=\"section\">\r\n        <div className=\"container\">\r\n          <Router></Router>\r\n        </div>\r\n      </section>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  POSTS_LOADING,\r\n  POSTS_FETCH_SUCCESS,\r\n  POSTS_FETCH_FAILURE\r\n} from '../actionTypes';\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  posts: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case POSTS_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload\r\n      };\r\n    }\r\n    case POSTS_FETCH_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        posts: action.payload\r\n      };\r\n    }\r\n    case POSTS_FETCH_FAILURE: {\r\n      return {\r\n        ...state,\r\n        posts: null\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  POST_LOADING,\r\n  POST_FETCH_SUCCESS,\r\n  POST_FETCH_FAILURE\r\n} from '../actionTypes';\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  post: null,\r\n  loadError: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case POST_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n        loadError: null\r\n      };\r\n    }\r\n    case POST_FETCH_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        post: action.payload\r\n      };\r\n    }\r\n    case POST_FETCH_FAILURE: {\r\n      return {\r\n        ...state,\r\n        post: null,\r\n        loadError: action.payload\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  USER_CLEAR,\r\n  USER_LOADING,\r\n  USER_FETCH_SUCCESS,\r\n  USER_FETCH_FAILURE\r\n} from '../actionTypes';\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  user: null,\r\n  loadError: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case USER_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n        loadError: null\r\n      };\r\n    }\r\n    case USER_CLEAR: {\r\n      return {\r\n        ...state,\r\n        user: null\r\n      };\r\n    }\r\n    case USER_FETCH_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        user: action.payload\r\n      };\r\n    }\r\n    case USER_FETCH_FAILURE: {\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        loadError: action.payload\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport posts from './posts/postsReducer';\r\nimport post from './post/postReducer';\r\nimport user from './user/userReducer';\r\n\r\nexport default combineReducers({\r\n  posts,\r\n  post,\r\n  user\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReducer';\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  rootElement\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}