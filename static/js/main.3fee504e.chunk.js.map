{"version":3,"sources":["components/nav.jsx","user/user.list.duck.js","user/user.list.item.jsx","components/loading.jsx","components/title.jsx","user/user.list.route.jsx","post/post.list.duck.js","post/post.list.item.jsx","post/post.list.route.jsx","user/user.detail.duck.js","post/post.detail.duck.js","user/user.summary.jsx","post/post.detail.jsx","post/post.detail.route.jsx","app/router.jsx","app/app.jsx","serviceWorker.js","redux/root.reducer.js","redux/store.js","index.js"],"names":["Nav","react_default","a","createElement","className","role","aria-label","href","target","rel","src","width","height","alt","id","react_router_dom","to","slice","createSlice","initialState","data","isLoading","loadError","reducers","setUserList","state","action","payload","clearUserList","setUserListIsLoading","setUserListLoadError","actions","getUserList","selectors","userListData","createSelector","userList","userListIsLoading","UserListItem","_ref","name","Loading","max","title","mapStateToProps","createStructuredSelector","mapDispatchToProps","fetchUsers","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","response","wrap","_context","prev","next","axios","get","sent","t0","message","stop","_x","apply","this","arguments","connect","useEffect","components_title","loading","map","user","user_list_item","assign","key","setPostList","clearPostList","setPostListIsLoading","setPostListLoadError","getPostList","postListData","postList","postListIsLoading","PostListItem","concat","fetchPosts","post","post_list_item","setCurrentUser","clearCurrentUser","setCurrentUserIsLoading","setCurrentUserLoadError","fetchUser","getUserDetail","currentUserData","setCurrentPost","clearCurrentPost","setCurrentPostIsLoading","setCurrentPostLoadError","getPostDetail","currentPostData","currentPostIsLoading","currentPostLoadError","UserSummary","PostDetail","body","user_summary","fetchPost","userId","match","params","post_detail","Router","react_router","exact","path","component","UserListRoute","PostListRoute","PostDetailRoute","App","basename","process","nav","router","Boolean","window","location","hostname","combineReducers","postDetail","userDetail","midddlewares","thunk","createStore","rootReducer","applyMiddleware","rootElement","document","getElementById","ReactDOM","render","es","store","app_app","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fee504e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n      <div className=\"navbar-brand\">\r\n        <a\r\n          className=\"navbar-item\"\r\n          href=\"https://bulma.io\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img\r\n            src=\"https://bulma.io/images/bulma-logo.png\"\r\n            width=\"112\"\r\n            height=\"28\"\r\n            alt=\"logo\"\r\n          />\r\n        </a>\r\n      </div>\r\n\r\n      <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n        <div className=\"navbar-start\">\r\n          <Link className=\"navbar-item\" to=\"/\">\r\n            Home\r\n          </Link>\r\n\r\n          <Link className=\"navbar-item\" to=\"/posts\">\r\n            Posts\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"navbar-end\">\r\n          <div className=\"navbar-item\">\r\n            <div className=\"buttons\">\r\n              <button className=\"button is-primary\">\r\n                <strong>Sign up</strong>\r\n              </button>\r\n              <button className=\"button is-light\">Log in</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import axios from 'axios';\r\nimport { createSlice, createSelector } from 'redux-starter-kit';\r\n\r\n// reducer\r\nconst slice = createSlice({\r\n  slice: 'userList',\r\n  initialState: {\r\n    data: null,\r\n    isLoading: false,\r\n    loadError: null\r\n  },\r\n  reducers: {\r\n    setUserList(state, action) {\r\n      state.data = action.payload;\r\n    },\r\n    clearUserList(state) {\r\n      state.data = null;\r\n    },\r\n    setUserListIsLoading(state, action) {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setUserListLoadError(state, action) {\r\n      state.loadError = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport default slice.reducer;\r\n\r\n// actions\r\nconst {\r\n  setUserList,\r\n  setUserListIsLoading,\r\n  setUserListLoadError\r\n} = slice.actions;\r\n\r\nexport function fetchUsers() {\r\n  return async dispatch => {\r\n    dispatch(setUserListIsLoading(true));\r\n    try {\r\n      const response = await axios.get(\r\n        'https://jsonplaceholder.typicode.com/users',\r\n        {}\r\n      );\r\n\r\n      dispatch(setUserListIsLoading(false));\r\n      dispatch(setUserList(response.data));\r\n    } catch (err) {\r\n      dispatch(setUserListIsLoading(false));\r\n      dispatch(setUserListLoadError(err.message));\r\n    }\r\n  };\r\n}\r\n\r\n// selectors\r\nconst { getUserList } = slice.selectors;\r\n\r\nexport const userListData = createSelector(\r\n  [getUserList],\r\n  userList => userList.data\r\n);\r\nexport const userListIsLoading = createSelector(\r\n  [getUserList],\r\n  userList => userList.isLoading\r\n);\r\n","import React from 'react';\r\n\r\nfunction UserListItem({ name }) {\r\n  return <div>{name}</div>;\r\n}\r\n\r\nexport default UserListItem;\r\n","import React from 'react';\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div className=\"columns is-mobile\">\r\n      <div className=\"column is-half is-offset-one-quarter\">\r\n        <progress className=\"progress is-primary\" max=\"100\"></progress>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\n\r\nfunction Loading({ title }) {\r\n  return <h1 className=\"title\">{title}</h1>;\r\n}\r\n\r\nexport default Loading;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { userListData, userListIsLoading, fetchUsers } from './user.list.duck';\r\nimport UserListItem from './user.list.item';\r\nimport Loading from '../components/loading';\r\nimport Title from '../components/title';\r\n\r\nfunction UserListRoute({ userListData, userListIsLoading, fetchUsers }) {\r\n  useEffect(() => {\r\n    if (userListData === null) {\r\n      fetchUsers();\r\n    }\r\n  }, [userListData, fetchUsers]);\r\n\r\n  return (\r\n    <div>\r\n      <Title title=\"Users\"></Title>\r\n      {userListIsLoading && <Loading></Loading>}\r\n      {userListData &&\r\n        userListData.map(user => <UserListItem key={user.id} {...user} />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  userListData,\r\n  userListIsLoading\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  fetchUsers\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserListRoute);\r\n","import axios from 'axios';\r\nimport { createSlice, createSelector } from 'redux-starter-kit';\r\n\r\n// reducer\r\nconst slice = createSlice({\r\n  slice: 'postList',\r\n  initialState: {\r\n    data: null,\r\n    isLoading: false,\r\n    loadError: null\r\n  },\r\n  reducers: {\r\n    setPostList(state, action) {\r\n      state.data = action.payload;\r\n    },\r\n    clearPostList(state) {\r\n      state.data = null;\r\n    },\r\n    setPostListIsLoading(state, action) {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setPostListLoadError(state, action) {\r\n      state.loadError = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport default slice.reducer;\r\n\r\n// actions\r\nconst {\r\n  setPostList,\r\n  setPostListIsLoading,\r\n  setPostListLoadError\r\n} = slice.actions;\r\n\r\nexport function fetchPosts() {\r\n  return async dispatch => {\r\n    dispatch(setPostListIsLoading(true));\r\n    try {\r\n      const response = await axios.get(\r\n        'https://jsonplaceholder.typicode.com/posts',\r\n        {}\r\n      );\r\n\r\n      dispatch(setPostListIsLoading(false));\r\n      dispatch(setPostList(response.data));\r\n    } catch (err) {\r\n      dispatch(setPostListIsLoading(false));\r\n      dispatch(setPostListLoadError(err.message));\r\n    }\r\n  };\r\n}\r\n\r\n// selectors\r\nconst { getPostList } = slice.selectors;\r\n\r\nexport const postListData = createSelector(\r\n  [getPostList],\r\n  postList => postList.data\r\n);\r\nexport const postListIsLoading = createSelector(\r\n  [getPostList],\r\n  postList => postList.isLoading\r\n);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction PostListItem({ id, title }) {\r\n  return (\r\n    <div>\r\n      <Link to={`/post/${id}`}>{title}</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostListItem;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { fetchPosts, postListData, postListIsLoading } from './post.list.duck';\r\nimport PostListItem from './post.list.item';\r\nimport Loading from '../components/loading';\r\nimport Title from '../components/title';\r\n\r\nfunction PostListRoute({ postListData, postListIsLoading, fetchPosts }) {\r\n  useEffect(() => {\r\n    if (!postListData) {\r\n      fetchPosts();\r\n    }\r\n  }, [postListData, fetchPosts]);\r\n\r\n  return (\r\n    <div>\r\n      <Title title=\"Posts\"></Title>\r\n      {postListIsLoading && <Loading></Loading>}\r\n      {postListData &&\r\n        postListData.map(post => <PostListItem key={post.id} {...post} />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  postListData,\r\n  postListIsLoading\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  fetchPosts\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostListRoute);\r\n","import axios from 'axios';\r\nimport { createSlice, createSelector } from 'redux-starter-kit';\r\n\r\n/// Reducers\r\nconst slice = createSlice({\r\n  slice: 'userDetail', //namespace our action type ('currentUser/setCurrentUser')\r\n  initialState: {\r\n    data: null,\r\n    isLoading: false,\r\n    loadError: null\r\n  },\r\n  reducers: {\r\n    setCurrentUser(state, action) {\r\n      state.data = action.payload;\r\n    }, //this will assign the payload to state, we aren't mutating state as its using immer behind the scenes\r\n    clearCurrentUser(state) {\r\n      state.data = null;\r\n    },\r\n    setCurrentUserIsLoading(state, action) {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setCurrentUserLoadError(state, action) {\r\n      state.loadError = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport default slice.reducer;\r\n\r\n/// actions\r\nconst {\r\n  setCurrentUser,\r\n  clearCurrentUser,\r\n  setCurrentUserIsLoading,\r\n  setCurrentUserLoadError\r\n} = slice.actions;\r\n\r\nexport function fetchUser(id) {\r\n  return async dispatch => {\r\n    dispatch(clearCurrentUser());\r\n    dispatch(setCurrentUserLoadError(null));\r\n    dispatch(setCurrentUserIsLoading(true));\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        'https://jsonplaceholder.typicode.com/users/' + id,\r\n        {}\r\n      );\r\n      dispatch(setCurrentUser(response.data));\r\n    } catch (err) {\r\n      dispatch(setCurrentUserLoadError(err.message));\r\n    }\r\n\r\n    dispatch(setCurrentUserIsLoading(false));\r\n  };\r\n}\r\n/// selectors\r\nconst { getUserDetail } = slice.selectors;\r\nexport const currentUserData = createSelector(\r\n  [getUserDetail],\r\n  user => user.data\r\n);\r\nexport const currentUserIsLoading = createSelector(\r\n  [getUserDetail],\r\n  user => user.isLoading\r\n);\r\nexport const currentUserLoadError = createSelector(\r\n  [getUserDetail],\r\n  user => user.loadError\r\n);\r\n","import axios from 'axios';\r\nimport { createSlice, createSelector } from 'redux-starter-kit';\r\nimport { fetchUser } from 'user/user.detail.duck';\r\n\r\n/// Reducers\r\nconst slice = createSlice({\r\n  slice: 'postDetail', //namespace our action type ('currentPost/setCurrentPost')\r\n  initialState: {\r\n    data: null,\r\n    isLoading: false,\r\n    loadError: null\r\n  },\r\n  reducers: {\r\n    setCurrentPost(state, action) {\r\n      state.data = action.payload;\r\n    }, //this will assign the payload to state, we aren't mutating state as its using immer behind the scenes\r\n    clearCurrentPost(state) {\r\n      state.data = null;\r\n    },\r\n    setCurrentPostIsLoading(state, action) {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setCurrentPostLoadError(state, action) {\r\n      state.loadError = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport default slice.reducer;\r\n\r\n/// actions\r\nconst {\r\n  setCurrentPost,\r\n  clearCurrentPost,\r\n  setCurrentPostIsLoading,\r\n  setCurrentPostLoadError\r\n} = slice.actions;\r\n\r\nexport function fetchPost(id) {\r\n  return async dispatch => {\r\n    dispatch(clearCurrentPost());\r\n    dispatch(setCurrentPostLoadError(null));\r\n    dispatch(setCurrentPostIsLoading(true));\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        'https://jsonplaceholder.typicode.com/posts/' + id,\r\n        {}\r\n      );\r\n      dispatch(setCurrentPost(response.data));\r\n      dispatch(fetchUser(response.data.userId));\r\n    } catch (err) {\r\n      dispatch(setCurrentPostLoadError(err.message));\r\n    }\r\n\r\n    dispatch(setCurrentPostIsLoading(false));\r\n  };\r\n}\r\n/// selectors\r\nconst { getPostDetail } = slice.selectors;\r\nexport const currentPostData = createSelector(\r\n  [getPostDetail],\r\n  post => post.data\r\n);\r\nexport const currentPostIsLoading = createSelector(\r\n  [getPostDetail],\r\n  post => post.isLoading\r\n);\r\nexport const currentPostLoadError = createSelector(\r\n  [getPostDetail],\r\n  post => post.loadError\r\n);\r\n","import React from 'react';\r\n\r\nfunction UserSummary({ name }) {\r\n  return <h2 className=\"subtitle\">By: {name}</h2>;\r\n}\r\n\r\nexport default UserSummary;\r\n","import React from 'react';\r\nimport UserSummary from '../user/user.summary';\r\nimport Title from '../components/title';\r\n\r\nfunction PostDetail({ title, user, body }) {\r\n  return (\r\n    <div>\r\n      <Title title={title}></Title>\r\n      <UserSummary className=\"sub-title\" {...user}></UserSummary>\r\n      <p>{body}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostDetail;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {\r\n  currentPostData,\r\n  currentPostIsLoading,\r\n  currentPostLoadError,\r\n  fetchPost\r\n} from './post.detail.duck';\r\nimport { currentUserData } from '../user/user.detail.duck';\r\nimport PostDetail from './post.detail';\r\nimport Loading from '../components/loading';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction PostDetailRoute({\r\n  fetchPost,\r\n  match,\r\n  currentPostData,\r\n  currentPostLoadError,\r\n  currentPostIsLoading,\r\n  currentUserData\r\n}) {\r\n  useEffect(() => {\r\n    const id = match.params.id;\r\n    if (id) {\r\n      fetchPost(id);\r\n    }\r\n  }, [fetchPost, match.params.id]);\r\n\r\n  return (\r\n    <div>\r\n      {currentPostIsLoading && <Loading></Loading>}\r\n      {currentPostLoadError && (\r\n        <div>\r\n          <h4 className=\"has-text-danger\">Unable to find requested item</h4>\r\n          <span>\r\n            Go to <Link to=\"/posts\">Posts</Link>\r\n          </span>\r\n        </div>\r\n      )}\r\n      {currentPostData && !currentPostIsLoading && (\r\n        <PostDetail {...currentPostData} user={currentUserData} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentPostData,\r\n  currentPostIsLoading,\r\n  currentPostLoadError,\r\n  currentUserData\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  fetchPost\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostDetailRoute);\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport UserListRoute from '../user/user.list.route.jsx';\r\nimport PostListRoute from '../post/post.list.route.jsx';\r\nimport PostDetailRoute from '../post/post.detail.route.jsx';\r\n\r\nfunction Router() {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={UserListRoute} />\r\n      <Route path=\"/posts\" component={PostListRoute} />\r\n      <Route path=\"/post/:id\" component={PostDetailRoute} />\r\n    </Switch>\r\n  );\r\n}\r\nexport default Router;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './app.scss';\r\nimport Nav from '../components/nav.jsx';\r\nimport Router from './router';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Nav></Nav>\r\n      <section className=\"section\">\r\n        <div className=\"container\">\r\n          <Router></Router>\r\n        </div>\r\n      </section>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport postList from '../post/post.list.duck';\r\nimport postDetail from '../post/post.detail.duck';\r\nimport userList from '../user/user.list.duck';\r\nimport userDetail from '../user/user.detail.duck';\r\n\r\nexport default combineReducers({\r\n  postList,\r\n  postDetail,\r\n  userList,\r\n  userDetail\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './root.reducer';\r\n\r\nconst midddlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  midddlewares.push(logger);\r\n}\r\n\r\nexport default createStore(rootReducer, applyMiddleware(...midddlewares));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  rootElement\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}